
au BufRead,BufNewFile SConscript set filetype=python
au BufRead,BufNewFile SConstruct set filetype=python
au BufRead,BufNewFile *.mac set filetype=maxima
au BufRead,BufNewFile *.cpy set filetype=python
au BufRead,BufNewFile *.cu set filetype=c
au BufRead,BufNewFile *.cl set filetype=c
au FileType python setlocal shiftwidth=4
au FileType lua setlocal shiftwidth=4
au FileType rst setlocal shiftwidth=4
au FileType mail setlocal spell
au BufRead,BufNewFile *.tex setlocal textwidth=70
au BufRead,BufNewFile *.tex setlocal formatoptions+=tcql
au BufRead,BufNewFile *.tex setlocal spell

"au FileType python setlocal foldmethod=indent
"au BufRead,BufNewFile *.tex setlocal shiftwidth=4

highlight FoldColumn guibg=gray90 guifg=black
highlight Folded guibg=white guifg=black
highlight clear SpellBad
highlight SpellBad ctermbg=Red gui=undercurl guisp=Red
highlight NonText guibg=Gray

try
  set list listchars=tab:»\ ,trail:·
catch /.*/ 
  set nolist
endtry

function FixWhitespace()
  %s/\s\+$//eg
  set expandtab
  %retab
endfunction
command Fws call FixWhitespace()

function WebEdit()
  set nolist
  set wrap
  set linebreak
  map j gj
  map k gk
endfunction
command We call WebEdit()
command De set spelllang=de

" go back to last position
autocmd BufReadPost *
      \ if line("'\"") > 0 && line ("'\"") <= line("$") |
      \   exe "normal g'\"" |
      \ endif

function! FillWithDashes()
  let s:line_no = line(".")
  let s:current_line = getline(s:line_no)
  while strlen(s:current_line) < 79
    let s:current_line = s:current_line . "-"
  endwhile
  call setline(s:line_no,s:current_line)
endfunction

map __ :call FillWithDashes()<enter>

function! UnspaceParentheses()
  :0,$s/( /(/g
  :0,$s/ )/)/g
endfunction

syntax enable

set guifont=Liberation\ Mono\ 9
set nowrap
set shiftwidth=2
set bs=2
set scrolljump=6
set nocompatible
set autoindent
set showcmd
set incsearch
set showmode
set ruler
set showmatch
set hlsearch
set ignorecase
set smartcase
set wildmenu
set title
set pastetoggle=<F2>

let g:netrw_list_hide='.*\~$,^\.'

set expandtab
set smarttab
set linebreak
set showbreak=>\ 

set selection=exclusive
set scrolloff=5


let g:dumbbuf_hotkey = '<Leader>b'
let g:dumbbuf_single_key  = 1

"set foldmethod=indent
"set foldcolumn=2
"set foldclose=all
"set foldminlines=4

set mps+=<:>

set backup
set hidden
set confirm
set winaltkeys=no
set guioptions=aeimgT
let &guicursor = &guicursor . ",a:blinkon0"
" set wildmode=longest
" remember 100 files, /tmp and /mnt are removable media
set viminfo='100,\"50,r/tmp,r/mnt
map Q @q
filetype plugin indent on

set path+=/home/andreas/dam/research/software/**
set path+=/home/andreas/src/**
set runtimepath+=/usr/share/vim/addons

" for latexsuite
set grepprg=grep\ -nH\ $*

map <f9> :make<enter>
map <f5> :cprevious<enter>
map <f6> :cnext<enter>

au QuickFixCmdPre * wa

omap lp ?^$\\|^\s*\(\\begin\\|\\end\\|\\label\)?1<CR>//-1<CR>.<CR>:nohlsearch<CR>


if has("python")
" pyblock.vim
au FileType python map ( :python move_same_indent(-1)<enter>
au FileType python map ) :python move_same_indent(1)<enter>
au FileType python map { :python move_outer_indent(-1)<enter>
au FileType python map } :python move_outer_indent(1)<enter>

python << EOF
def count_indent(line):
    import vim
    i = 0
    tab_width = int(vim.eval("&tabstop"))
    for s in line:
        if s == ' ':
            i += 1
        elif s == '\t':
            i += tab_width
        else:
            return i

    return 0

def move_by_indent(end_pred, direction):
    import vim

    buf = vim.current.buffer
    row, col = vim.current.window.cursor
    row -= 1
    start_indent = count_indent(buf[row])

    while True:
        row += direction

        # bail if we hit the end
        if row < 0 or row >= len(buf):
            break

        # skip over empty lines
        if not buf[row].strip():
            continue

        if end_pred(count_indent(buf[row]), start_indent):
            break

    row = max(0, min(len(buf)-1, row))

    vim.current.window.cursor = row+1, col



def move_same_indent(direction):
    move_by_indent(
      lambda indent, s_indent: indent <= s_indent,
      direction)



def move_outer_indent(direction):
    move_by_indent(
      lambda indent, s_indent: indent < s_indent,
      direction)
EOF
endif
